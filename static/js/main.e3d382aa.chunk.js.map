{"version":3,"sources":["options.js","api/api.js","redux/weatherReducer.js","App.js","redux/store.js","index.js"],"names":["options","value","label","getWeather","city","a","fetch","data","json","weatherSlice","createSlice","name","initialState","windSpeed","temp","tempfellsLike","pressure","iconId","weekdayName","reducers","updateWeather","state","action","payload","updateWeatherThunk","dispatch","Math","round","wind","speed","main","feels_like","weather","id","Date","dt","toLocaleString","weekday","actions","Container","styled","div","Flex","P","p","WeekdayName","App","useSelector","useDispatch","useEffect","placeholder","onChange","e","className","persistConfig","key","version","storage","roorReducer","combineReducers","weatherReducer","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"yMAAaA,EAAU,CACrB,CAAEC,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,mBAAoBC,MAAO,oBACpC,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,YAAaC,MAAO,c,gCCVlBC,EAAU,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACLC,MAAM,qDAAD,OAAsDF,EAAtD,4CADA,cAClBG,EADkB,yBAEjBA,EAAKC,QAFY,2CAAH,sDCGjBC,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZR,KAAM,KACNS,UAAW,KACXC,KAAM,KACNC,cAAe,KACfC,SAAU,KACVC,OAAQ,KACRC,YAAa,MAEfC,SAAU,CACRC,cADQ,SACMC,EAAOC,GACnB,OAAOA,EAAOC,YAKPC,EAAqB,SAAApB,GAChC,8CAAO,WAAMqB,GAAN,2BAAApB,EAAA,sEACcF,EAAWC,GADzB,OACCG,EADD,OAECM,EAAYa,KAAKC,MAAMpB,EAAKqB,KAAKC,OACjCf,EAAOY,KAAKC,MAAMpB,EAAKuB,KAAKhB,MAAQ,IACpCC,EAAgBW,KAAKC,MAAMpB,EAAKuB,KAAKC,YAAc,IACnDf,EAAWT,EAAKuB,KAAKd,SACrBC,EAASV,EAAKyB,QAAQ,GAAGC,GACzBf,EAAc,IAAIgB,KAAe,IAAV3B,EAAK4B,IAAWC,eAAe,KAAM,CAAEC,QAAS,SAC7EZ,EAAShB,EAAa6B,QAAQlB,cAAc,CAAEhB,OAAMS,YAAWC,OAAMC,gBAAeC,WAAUC,SAAQC,iBARjG,4CAAP,uDAcaT,GAFkBA,EAAa6B,QAA/BlB,cAEAX,EAAf,S,wjBC7BA,IAAM8B,EAAYC,IAAOC,IAAV,KAQTC,EAAOF,IAAOC,IAAV,KAMJE,EAAIH,IAAOI,EAAV,KAKDC,EAAcL,YAAOG,EAAPH,CAAH,KAKV,SAASM,IAAO,IAAD,EAC4DC,aAAY,SAAA1B,GAAK,OAAIA,EAAMA,SAAnGjB,EADY,EACZA,KAAMS,EADM,EACNA,UAAWC,EADL,EACKA,KAAMC,EADX,EACWA,cAAeC,EAD1B,EAC0BA,SAAUC,EADpC,EACoCA,OAAQC,EAD5C,EAC4CA,YAC1DO,EAAWuB,cAMjB,OALAC,qBAAU,WAERxB,EAASD,EADIpB,GAAQ,aAEpB,IAGD,eAACmC,EAAD,WACE,cAAC,IAAD,CAAQW,YAAa9C,EAAM+C,SAAU,SAAAC,GAAC,OAAI3B,EAASD,EAAmB4B,EAAElD,SAASF,QAASA,IAC1F,eAAC0C,EAAD,WACE,gCACE,eAACC,EAAD,kFAAiB7B,EAAjB,YACA,eAAC6B,EAAD,qGAAqB5B,EAArB,YACA,eAAC4B,EAAD,+FAAoB9B,EAApB,oBACA,eAAC8B,EAAD,gEAAc3B,EAAd,mDAEF,gCACE,cAAC6B,EAAD,UAAc3B,IACd,mBAAGmC,UAAS,kBAAapC,EAAb,sB,0BC9ChBqC,EAAgB,CACpBC,IAAK,OACLC,QAAS,EACTC,Q,OAAAA,GAEIC,EAAcC,YAAgB,CAClCtC,MAAOuC,IAEHC,EAAmBC,YAAeR,EAAeI,GAEjDK,EAAQC,YAAe,CAC3BC,QAASJ,EACTK,WAAYC,YAAqB,CAC/BC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,UAI1DC,EAAYC,YAAad,G,QCf/Be,IAASC,OACP,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaiB,QAAS,KAAMJ,UAAWA,EAAvC,SACE,cAAC9B,EAAD,QAGJmC,SAASC,eAAe,W","file":"static/js/main.e3d382aa.chunk.js","sourcesContent":["export const options = [\r\n  { value: 'london', label: 'London' },\r\n  { value: 'moscow', label: 'Moscow' },\r\n  { value: 'saint petersburg', label: 'Saint Petersburg' },\r\n  { value: 'paris', label: 'Paris' },\r\n  { value: 'washington', label: 'Washington' },\r\n  { value: 'berlin', label: 'Berlin' },\r\n  { value: 'rome', label: 'Rome' },\r\n  { value: 'madrid', label: 'Madrid' },\r\n  { value: 'manchester', label: 'Manchester' },\r\n  { value: 'barcelona', label: 'Barcelona' },\r\n]\r\n","export const getWeather = async city => {\r\n  const data = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=268c9dc1c388bb08a938a9884b4c79fd`)\r\n  return data.json()\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { getWeather } from '../api/api'\r\n\r\nconst weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState: {\r\n    city: null,\r\n    windSpeed: null,\r\n    temp: null,\r\n    tempfellsLike: null,\r\n    pressure: null,\r\n    iconId: null,\r\n    weekdayName: null,\r\n  },\r\n  reducers: {\r\n    updateWeather(state, action) {\r\n      return action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const updateWeatherThunk = city => {\r\n  return async dispatch => {\r\n    const data = await getWeather(city)\r\n    const windSpeed = Math.round(data.wind.speed)\r\n    const temp = Math.round(data.main.temp) - 273\r\n    const tempfellsLike = Math.round(data.main.feels_like) - 273\r\n    const pressure = data.main.pressure\r\n    const iconId = data.weather[0].id\r\n    const weekdayName = new Date(data.dt * 1000).toLocaleString('ru', { weekday: 'long' })\r\n    dispatch(weatherSlice.actions.updateWeather({ city, windSpeed, temp, tempfellsLike, pressure, iconId, weekdayName }))\r\n  }\r\n}\r\n\r\nexport const { updateWeather } = weatherSlice.actions\r\n\r\nexport default weatherSlice.reducer\r\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Select from 'react-select'\nimport styled from 'styled-components'\nimport { options } from './options'\nimport { updateWeatherThunk } from './redux/weatherReducer'\n\nconst Container = styled.div`\n  max-width: 500px;\n  margin: 50px auto 0;\n  padding: 10px 15px;\n  border-radius: 8px;\n  border: 1px solid #dfe1e5;\n`\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nconst P = styled.p`\n  margin-top: 10px;\n  color: #878787;\n`\n\nconst WeekdayName = styled(P)`\n  text-align: center;\n  margin-bottom: 5px;\n`\n\nexport function App() {\n  const { city, windSpeed, temp, tempfellsLike, pressure, iconId, weekdayName } = useSelector(state => state.state)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    const data = city || 'London'\n    dispatch(updateWeatherThunk(data))\n  }, [])\n\n  return (\n    <Container>\n      <Select placeholder={city} onChange={e => dispatch(updateWeatherThunk(e.label))} options={options} />\n      <Flex>\n        <div>\n          <P>Температура: {temp} &deg;C</P>\n          <P>Чувствуется как: {tempfellsLike} &deg;C</P>\n          <P>Скорость ветра: {windSpeed} м/с</P>\n          <P>Давление: {pressure} мм. рт. ст.</P>\n        </div>\n        <div>\n          <WeekdayName>{weekdayName}</WeekdayName>\n          <i className={`owf owf-${iconId} owf-5x`}></i>\n        </div>\n      </Flex>\n    </Container>\n  )\n}\n","import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport weatherReducer from './weatherReducer'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  version: 1,\r\n  storage,\r\n}\r\nconst roorReducer = combineReducers({\r\n  state: weatherReducer,\r\n})\r\nconst persistedReducer = persistReducer(persistConfig, roorReducer)\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n})\r\nconst persistor = persistStore(store)\r\nexport { store, persistor }\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport { store, persistor } from './redux/store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}